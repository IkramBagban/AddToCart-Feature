import React from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Dimensions } from 'react-native';
import { Colors } from '../constants/colors';
import Button from '../components/Button';
import Carts from '../components/Carts';
import { myStore } from '../myStore/myStore';

// import store from '../store/redux';
// import { Provider } from 'react-redux';
const WelcomeScreen = ({ onLogout }) => {
  const handleLogout = () => {
    onLogout();
  };

  const { width, height } = Dimensions.get('window');
  const isPortrait = height > width;

  return (

    <View style={styles.container}>
      <View style={isPortrait ? styles.portraitContent : styles.landscapeContent}>
        <Carts />

      </View>
      <View style={styles.buttonContainer}>
        <Button onPress={handleLogout} text='Logout' style={styles.button} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: Colors.secondary500,
  },
  portraitContent: {
    flex: 1,
    width: '80%',
    maxWidth: 500,
    alignItems: 'center',
    justifyContent: 'center',
  },
  landscapeContent: {
    flex: 1,
    width: '60%',
    maxWidth: 500,
    alignItems: 'center',
    justifyContent: 'center',
  },
  buttonContainer: {
    width: '100%',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 20,
  },
  button: {
    backgroundColor: Colors.primary500,
    borderRadius: 25,
    paddingVertical: 15,
    paddingHorizontal: 40,
    elevation: 5,
  },
});

export default WelcomeScreen;
welcomeScreen.js

import { View, Text, Image, StyleSheet } from 'react-native'
import React, { useEffect, useState } from 'react'
import { Colors } from '../constants/colors'
import Button from './Button'
import { useDispatch } from 'react-redux';
import { addMyProduct } from '../myStore/myProductSlice';

export default function Cart({ item }) {

  const [count, setCount] = useState(0);

  function countHandler(mode) {
    if (mode === 'increase') setCount(count + 1);
    else if (count > 0) setCount(count - 1);
  }

  useEffect(() => {
    console.log(count)
  }, [count])

  return (
    <View style={styles.rootContainer}>
      <View style={styles.container}>
        <View style={styles.itemContainer}>
          <Image style={styles.itemImage} source={{ uri: item.img }} />
          <View style={styles.itemDetails}>
            <Text style={styles.itemName}>{item.name}</Text>
            <Text style={styles.itemPrice}>{item.price}</Text>
          </View>
          <View style={styles.buttonContainer}>
            <Button text='+' onPress={countHandler.bind(this, 'increase')} />
            <Text style={styles.countText}>{count}</Text>
            <Button text='-' onPress={countHandler.bind(this, 'dec')} />
          </View>
        </View>
      </View>
    </View>
  )
}
cart.js


import React from 'react';
import { View, Text, StyleSheet, FlatList } from 'react-native';
import { useSelector } from 'react-redux';
import Cart from './Cart';
import Button from './Button';
import { useNavigation } from '@react-navigation/native';
import { cartData } from '../data'
import { useDispatch } from 'react-redux';
import { useEffect } from 'react';
import { addMyProduct } from '../myStore/myProductSlice';
import { Colors } from '../constants/colors';

const Carts = () => {
  const navigation = useNavigation();

  const dispatch = useDispatch()
  useEffect(() => {
    cartData.map((item) => {
      dispatch(addMyProduct(item))
    })
  }, [])
  const myProduct = useSelector((state) => state.product);
  const myCart = useSelector((state) => state.Cart);
  console.log('myProduct', myProduct)
  console.log('myCart', myCart)
  // console.log('cartData', cartData)
  const handleTotalPress = () => {
    // console.log(myProduct[0])
    navigation.navigate('TotalScreen');
  };


  // const dispatch = useDispatch()

  function addToCartHandler(item) {
    console.log('add to cart working ' + item.productId)
    // dispatch(addToCartHandler(item))
    dispatch(addMyProduct(item));
  }
  return (
    <View>
      <FlatList
        data={myProduct}
        renderItem={({ item }) => (
          <>
            <Cart item={item} />
            <Button text='Add to Cart' style={styles.addToCartButton} onPress={addToCartHandler.bind(this, item)} />
          </>
        )}
        keyExtractor={(item) => item.productId.toString()} // Use a unique identifier as the key
      />

      <Button text='Total' onPress={handleTotalPress} />
      <Text style={styles.total}>TotalItem </Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  total: {
    borderWidth: 1,
    borderColor: Colors.primary500,
    padding: 5,
    justifyContent: 'center',
    alignContent: 'center'
  }
});

export default Carts;
carts.js

import { createSlice } from "@reduxjs/toolkit";

const myCartSlice = createSlice({
    name: 'cart',
    initialState: [],
    reducers: {
        addToMyCart(state, action) {
            
            state.push(action.payload)
        }
    }
})

export const {addToMyCart} = myCartSlice.actions;
export default myCartSlice.reducer

myCartSlice.js

import { createSlice } from "@reduxjs/toolkit";

const myProductSlice = createSlice({
    name: 'product',
    initialState: [],
    reducers: {
        addMyProduct(state, action) {
            state.push(action.payload)
        }
    }
})

export const {addMyProduct} = myProductSlice.actions;
export default myProductSlice.reducer
myProductSlice.js

import { configureStore } from "@reduxjs/toolkit";
import myProductReducer from "./myProductSlice";
import myCartReducer from "./myCartSlice";

export const myStore = configureStore({
    reducer:{
        product:  myProductReducer,
        cart: myCartReducer
    }
})
mystore.js

// import { useSelector } from 'react-redux';

import { View,Text } from "react-native";
import Cart from "../components/Cart";
// import { useSelector } from "react-redux";

const TotalScreen = () => {
  // const carts = useSelector((state) => state.data.carts);
  // const total = carts.reduce((acc, item) => acc + item.price * item.quantity, 0);
  return (
    <View>
      <Text>Total: total.Text</Text>
      {/* <Cart name={route.params.myProduct[0].name} productId={route.params.myProduct[0].name} img={route.params.myProduct[0].img} price={route.params.myProduct[0].name} /> */}
    </View>
  );
};

export default TotalScreen;

totalscreen.js

export const cartData = [
  {
    productId: 1,
    name: 'ASIAN',
    cat: 'men',
    img: 'https://modernlaundry.net/admin/uploads/item/ITEM_1571464823.jpg',
    price: 29.99,
    qty: 0
  },
  {
    productId: 2,
    name: 'COAT',
    cat: 'men',
    img: 'https://modernlaundry.net/admin/uploads/item/ITEM_1571464823.jpg',
    price: 89.99,
    qty: 0
  },
  {
    productId: 3,
    name: 'NIKE',
    cat: 'men',
    img: 'https://modernlaundry.net/admin/uploads/item/ITEM_1571464823.jpg',
    price: 12.99,
    qty: 0
  },
  {
    productId: 4,
    name: 'ADIDAS',
    cat: 'men',
    img: 'https://modernlaundry.net/admin/uploads/item/ITEM_1571464823.jpg',
    price: 14.99,
    qty: 0
  },
  {
    productId: 5,
    name: 'PATAGONIA',
    cat: 'men',
    img: 'https://modernlaundry.net/admin/uploads/item/ITEM_1571464823.jpg',
    price: 99.99,
    qty: 0
  },
  {
    productId: 6,
    name: 'COLUMBIA',
    cat: 'men',
    img: 'https://modernlaundry.net/admin/uploads/item/ITEM_1571464823.jpg',
    price: 79.99,
    qty: 0
  },
  {
    productId: 7,
    name: 'THE NORTH FACE',
    cat: 'men',
    img: 'https://modernlaundry.net/admin/uploads/item/ITEM_1571464823.jpg',
    price: 19.99,
    qty: 0
  },
  

]
data.js


jab ham increase ya decrease kare count ki value. count ko replace karo cartData k qty se.

aur jitni quantity ho item ki us hisab se update karna price. aur addd to cart pe click kare baad total screenpe add karo. 


